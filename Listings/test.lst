C51 COMPILER V9.56.0.0   TEST                                                              04/18/2018 00:03:18 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TEST
OBJECT MODULE PLACED IN .\Objects\test.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE test.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\test
                    -.lst) TABS(2) OBJECT(.\Objects\test.obj)

line level    source

   1          /*
   2          
   3          * Project Name:   Table Clock
   4          * Author List:    Karan Mamaniya
   5          * Filename:     test.c
   6          * Functions:    
   7          * Global Variables: currentTime, AlarmTime, dispArr[], dispArr1[]
   8          *
   9          */
  10          
  11          #include "Includes.h"
  12          #include "DHT11.h"
  13          #include <reg51.h>
  14          #define debounceTime 5000
  15          
  16          unsigned short currentTime;
  17          unsigned char dispArr1[7];
  18          unsigned char dispArr[10];
  19          sbit modepin = P0^0;
  20          sbit changetens = P0^1;
  21          sbit changeunits= P0^2;
  22          sbit setpin = P0^3;
  23          sbit AMLed = P3^2;
  24          sbit PMLed = P3^3;
  25          sbit buzzer = P3^4;
  26          sbit latch = P3^0;
  27          int flag=0;
  28          unsigned char AlarmHH[10]={1,1,1,1,1,1,1,1,1,1};
  29          unsigned char AlarmMM[10]={0,0,0,0,0,0,0,0,0,0};
  30          unsigned char AlarmAP[10]={0,0,0,0,0,0,0,0,0,0};
  31          unsigned char YY1=20,YY2,MM,DD,HH,MIN,SS,AP,temperature;
  32          unsigned short AlarmTime[10];
  33          int bitflag=0;
  34          int timeset=0;
  35          int tempflag=0;
  36          
  37          /*
  38          * Function Name:  CalculateTempTo7seg
  39          * Input:      unsigned char
  40          * Output:     void, values updates in the display array
  41          * Logic:      decode BCD from decimal data
  42          */
  43          void CalculateTempTo7seg(unsigned char temp){
  44   1        //Temperature
  45   1        temperature=temp;
  46   1        dispArr[8]=temperature/10;
  47   1        dispArr[9]=temperature%10;
  48   1        delay(100);
  49   1      }
  50          
  51          /*
  52          * Function Name:  CalculateDateTo7seg
  53          * Input:      char *
  54          * Output:     void, values updates in the display array
C51 COMPILER V9.56.0.0   TEST                                                              04/18/2018 00:03:18 PAGE 2   

  55          * Logic:      decode BCD from decimal data
  56          */
  57          void CalculateDateTo7seg(char * pDateArray){   // Displays date in DD:MM:YYYY format
  58   1        
  59   1        //Date
  60   1        DD=pDateArray[1];
  61   1        dispArr[0]=(char)(DD/10);
  62   1        dispArr[1]=(char)(DD%10);
  63   1        delay(100);
  64   1        
  65   1        //Months
  66   1        MM=pDateArray[2];
  67   1        dispArr[2]=(char)(MM/10);
  68   1        dispArr[3]=(char)(MM%10);
  69   1        delay(100);
  70   1        
  71   1        //Year
  72   1        dispArr[4]=(char)YY1/10;
  73   1        dispArr[5]=(char)YY1%10;
  74   1        YY2=pDateArray[3];
  75   1        dispArr[6]=(char)(YY2/10);
  76   1        dispArr[7]=(char)(YY2%10);
  77   1        YY2=pDateArray[3];
  78   1        delay(100);
  79   1      }
  80          
  81          /*
  82          * Function Name:  CalculateTimeTo7seg
  83          * Input:      char *
  84          * Output:     void, values updates in the display array
  85          * Logic:      decode BCD from decimal data, store the current time in a variable
  86          */
  87          void CalculateTimeTo7seg(char *pTimeArray) {  // Displays date in DD:MM:YYYY format
  88   1        
  89   1        //Hours
  90   1        HH=pTimeArray[2];
  91   1        dispArr1[0]=(HH/10);
  92   1        dispArr1[1]=(HH%10);
  93   1        delay(100);
  94   1        
  95   1        //Minutes
  96   1        MIN=pTimeArray[1];
  97   1        dispArr1[2]=(MIN/10);
  98   1        dispArr1[3]=(MIN%10);
  99   1        delay(100);
 100   1        
 101   1        //Seconds
 102   1        SS=pTimeArray[0];
 103   1        dispArr1[4]=(SS/10);
 104   1        dispArr1[5]=(SS%10);
 105   1        delay(100);
 106   1        
 107   1        //AM PM
 108   1        AP=(unsigned char)pTimeArray[3];
 109   1        dispArr1[6]=AP;
 110   1        currentTime = 60*pTimeArray[2]+pTimeArray[1] + AP*720;    // 60 MINS * NO. OF HOURS + MINUTES  + 12 HOURS
             - for AM/PM
 111   1        delay(100);
 112   1      }
 113          
 114          /*
 115          * Function Name:  display
C51 COMPILER V9.56.0.0   TEST                                                              04/18/2018 00:03:18 PAGE 3   

 116          * Input:      void
 117          * Output:     void, Displays time, date, temperature on 7 Segment LED
 118          * Logic:      chose the led to be displayed by address on port 1 and latch it with data by port 2
 119          */
 120          void display(){
 121   1        char i;
 122   1        
 123   1        /// AM PM LED DISPLAY
 124   1        if(dispArr1[6]==1){
 125   2          PMLed=1;delay(100);
 126   2          AMLed=0;
 127   2        }
 128   1        else if(dispArr1[6]==0){
 129   2          PMLed=0;delay(100);
 130   2          AMLed=1;
 131   2        }
 132   1        else{
 133   2          PMLed=0;delay(100);
 134   2          AMLed=0;
 135   2        }
 136   1        delay(100);
 137   1        
 138   1        
 139   1        //DATE DISPLAY
 140   1        for(i=0;i<10;i++){
 141   2          P2 = dispArr[i];
 142   2          delay(10);
 143   2          P1 = (unsigned char)i;
 144   2          delay(10);
 145   2          latch=0;
 146   2          delay(10);
 147   2          latch=1;
 148   2          delay(10);
 149   2        }
 150   1        delay(100);
 151   1        
 152   1        
 153   1        //TIME DISPLAY
 154   1        for(i=0;i<6;i++){
 155   2          P2 = dispArr1[i];
 156   2          delay(10);
 157   2          P1 = (unsigned char)(i+10);
 158   2          delay(10);
 159   2          latch=0;
 160   2          delay(10);
 161   2          latch=1;
 162   2          delay(10);
 163   2        }
 164   1        delay(100);
 165   1      }
 166          
 167          
 168          /*x
 169          * Function Name:  setTime
 170          * Input:      void
 171          * Output:     void, sets user inputed time in the RTC
 172          * Logic:      dont update if no changed made, Store the variables temporarily in HH,MM,SS, AP display 0 for r
             -est of the values 
 173          */
 174          void setTime(){
 175   1        int i;
 176   1        timeset=0;
C51 COMPILER V9.56.0.0   TEST                                                              04/18/2018 00:03:18 PAGE 4   

 177   1        bitflag=0;
 178   1          while(1){
 179   2              if(modepin==0){
 180   3                delay(debounceTime);
 181   3                if(modepin==0){
 182   4                  while(modepin!=1);
 183   4                  flag = 2;
 184   4                  if(timeset==1)      // SET TIME ONLY IF CHANGED
 185   4                    Set_DS1307_RTC_Time(AP,HH,MIN,SS);
 186   4                  Set_DS1307_RTC_Date(DD,MM,YY2,4);
 187   4                  break;
 188   4                }
 189   3              }
 190   2              for(i=0;i<10;i++)     //Make the date segment 00 00 0000
 191   2                dispArr[i]=0;
 192   2              
 193   2              dispArr1[0]=HH/10;      //Display the temporary variables
 194   2              dispArr1[1]=HH%10;
 195   2              dispArr1[2]=MIN/10;
 196   2              dispArr1[3]=MIN%10;
 197   2              dispArr1[4]=SS/10;
 198   2              dispArr1[5]=SS%10;
 199   2              dispArr1[6]=AP;
 200   2              
 201   2              display();
 202   2              
 203   2              
 204   2              // IF DECREMENT IS PRESSED
 205   2              if(changetens==0){
 206   3                delay(debounceTime);
 207   3                if(changetens==0){
 208   4                  timeset=1;        //marks change in value, hence update time
 209   4                  while(changetens!=1);
 210   4                  switch(bitflag){
 211   5                    case 0: HH--;
 212   5                            if(HH==0)
 213   5                              HH=12;
 214   5                            break;
 215   5                    case 1: MIN--;
 216   5                            if(MIN>=60)
 217   5                              MIN=59;
 218   5                            break;
 219   5                    case 2: SS--;
 220   5                            if(SS>=60)
 221   5                              SS=59;
 222   5                            break;
 223   5                    case 3: AP++;
 224   5                            AP%=2;
 225   5                    default: break;
 226   5                  }
 227   4                }
 228   3              }
 229   2              
 230   2              
 231   2              // IF INCREMENT IS PRESSED
 232   2              if(changeunits==0){
 233   3                delay(debounceTime);
 234   3                if(changeunits==0){
 235   4                  timeset=1;      //marks change in value, hence update time
 236   4                  while(changeunits!=1);
 237   4                  switch(bitflag){
 238   5                    case 0: HH++;
C51 COMPILER V9.56.0.0   TEST                                                              04/18/2018 00:03:18 PAGE 5   

 239   5                            if(HH>12)
 240   5                              HH=1;
 241   5                            break;
 242   5                    case 1: MIN++;
 243   5                            MIN=MIN%60;
 244   5                            break;
 245   5                    case 2: SS++;
 246   5                            SS=SS%60;
 247   5                            break;
 248   5                    case 3: AP++;
 249   5                            AP%=2;
 250   5                    default: break;
 251   5                  }
 252   4                }
 253   3              }
 254   2              
 255   2              
 256   2            //IF CHANGE BLOCK IS PRESSED
 257   2            if(setpin==0){
 258   3              delay(debounceTime);
 259   3              if(setpin==0){
 260   4                while(setpin!=1);
 261   4                bitflag++;
 262   4                bitflag%=4;
 263   4              }
 264   3            }
 265   2          }
 266   1        delay(100);
 267   1      }
 268          
 269          
 270          /*
 271          * Function Name:  setDate
 272          * Input:      void
 273          * Output:     void, sets user inputed date in the RTC
 274          * Output:     void, sets user inputed date in the RTC
 275          * Logic:      update even if no changed made, Store the variables temporarily in DD,MM,YYYY display 0 for res
             -t of the values 
 276          */
 277          void setDate(){
 278   1          int i;
 279   1          bitflag=0;
 280   1          while(flag<2){
 281   2          for(i=0;i<6;i++)      //display 00:00:00 for time
 282   2            dispArr1[i]=0;
 283   2          
 284   2          
 285   2          dispArr1[6]=2;        //Display temporary variables
 286   2          dispArr[8]=0;
 287   2          dispArr[9]=0;
 288   2          dispArr[0]=DD/10;
 289   2          dispArr[1]=DD%10;
 290   2          dispArr[2]=MM/10;
 291   2          dispArr[3]=MM%10;
 292   2          dispArr[4]=YY1/10;
 293   2          dispArr[5]=YY1%10;
 294   2          dispArr[6]=YY2/10;
 295   2          dispArr[7]=YY2%10;
 296   2          display();
 297   2            
 298   2          //IF INCREMENT IS PRESSED
 299   2          if(changetens==0){
C51 COMPILER V9.56.0.0   TEST                                                              04/18/2018 00:03:18 PAGE 6   

 300   3            delay(debounceTime);
 301   3            if(changetens==0){
 302   4              while(changetens!=1);
 303   4              switch(bitflag){
 304   5                case 0: DD--;
 305   5                        if(DD==0)
 306   5                          DD=31;
 307   5                        break;
 308   5                case 1: MM--;
 309   5                        if(MM==0)
 310   5                          MM=12;
 311   5                        break;
 312   5                case 2: YY1--;
 313   5                        if(YY1>99)
 314   5                          YY1=99;
 315   5                        break;
 316   5                case 3: YY2--;
 317   5                        if(YY2>99)
 318   5                          YY2=99;
 319   5                default: break;
 320   5              }
 321   4            }
 322   3          }
 323   2          
 324   2          //IF DECREMENT IS PRESSED
 325   2          if(changeunits==0){
 326   3            delay(debounceTime);
 327   3            if(changeunits==0){
 328   4              while(changeunits!=1);
 329   4              switch(bitflag){
 330   5                case 0: DD++;
 331   5                        if(DD>31)
 332   5                          DD=1;
 333   5                        break;
 334   5                case 1: MM++;
 335   5                        if(MM>12)
 336   5                          MM=1;
 337   5                        break;
 338   5                case 2: YY1++;
 339   5                        YY1%=100;
 340   5                        break;
 341   5                case 3: YY2++;
 342   5                        YY2%=100;
 343   5                default: break;
 344   5              }
 345   4            }
 346   3          }
 347   2          
 348   2          //IF CHANGE BLOCK IS PRESSED
 349   2          if(setpin==0){
 350   3            delay(debounceTime);
 351   3            if(setpin==0){
 352   4              while(setpin!=1);
 353   4              bitflag++;
 354   4              bitflag%=4;
 355   4            }
 356   3          }
 357   2          
 358   2          //IF CHANGE MODE IS PRESSED
 359   2          if(modepin==0){
 360   3            delay(debounceTime);
 361   3            if(modepin==0){
C51 COMPILER V9.56.0.0   TEST                                                              04/18/2018 00:03:18 PAGE 7   

 362   4              while(modepin!=1);
 363   4              setTime();
 364   4            }
 365   3          }
 366   2        } 
 367   1        delay(100);
 368   1      }
 369          
 370          /*
 371          * Function Name:  setAlarm
 372          * Input:      void
 373          * Output:     void, stores user inputed alarm in the memore
 374          * Logic:      update even if no changed made, Store the variables temporarily in AlarmHH,AlarmMM,AlarmSS,Alar
             -mAP, display 0 for rest pf the values 
 375          */
 376          void setAlarm(){
 377   1            int j=0;    
 378   1            int i=0;
 379   1            bitflag=0;
 380   1            while(flag<2){
 381   2              
 382   2              for(i=0;i<8;i++)      // DISPLAY 00 00 0000 for date
 383   2                dispArr[i]=0;
 384   2                
 385   2              dispArr1[0]=AlarmHH[j]/10;    //Display stored alarm or default alarm on 7 seg display
 386   2              dispArr1[1]=AlarmHH[j]%10;
 387   2              dispArr1[2]=AlarmMM[j]/10;
 388   2              dispArr1[3]=AlarmMM[j]%10;
 389   2              dispArr1[4]=0;
 390   2              dispArr1[5]=0;
 391   2              dispArr[8]=(j+1)/10;
 392   2              dispArr[9]=(j+1)%10;
 393   2              dispArr1[6]=AlarmAP[j];
 394   2              display();
 395   2              
 396   2              //IF DECREMENT IS PRESSED
 397   2              if(changetens==0){
 398   3                delay(debounceTime);
 399   3                if(changetens==0){
 400   4                  while(changetens!=1 );
 401   4                  if(bitflag==0){
 402   5                    AlarmHH[j]--;
 403   5                    if(AlarmHH[j]==0)
 404   5                      AlarmHH[j]=12;
 405   5                  }
 406   4                  else if(bitflag==1){
 407   5                    AlarmMM[j]--;
 408   5                    if(AlarmMM[j]>=60)
 409   5                      AlarmMM[j]=59;
 410   5                  }
 411   4                  else {
 412   5                      AlarmAP[j]++;
 413   5                      AlarmAP[j]%=2;
 414   5                  }
 415   4                }
 416   3              }
 417   2              
 418   2              //IF INCREMENT IS PRESSED
 419   2              if(changeunits==0){
 420   3                delay(debounceTime);
 421   3                if(changeunits==0){
 422   4                  while(changeunits!=1);
C51 COMPILER V9.56.0.0   TEST                                                              04/18/2018 00:03:18 PAGE 8   

 423   4                  if(bitflag==0){
 424   5                    AlarmHH[j]++;
 425   5                    if(AlarmHH[j]>12)
 426   5                      AlarmHH[j]=1;
 427   5                  }
 428   4                  else if(bitflag==1){
 429   5                    AlarmMM[j]++;
 430   5                    AlarmMM[j]%=60;
 431   5                  }
 432   4                  else {
 433   5                      AlarmAP[j]++;
 434   5                      AlarmAP[j]%=2;
 435   5                  }
 436   4                }
 437   3              }
 438   2              
 439   2              //IF CHANGE BLOCK IS PRESSED
 440   2              if(setpin==0){
 441   3                delay(debounceTime);
 442   3                if(setpin==0){
 443   4                  while(setpin!=1);
 444   4                  bitflag++;
 445   4                  bitflag%=3;
 446   4                }
 447   3              }
 448   2              
 449   2              //IF CHANGE MODE IS PRESSED
 450   2              if(modepin==0){
 451   3              delay(debounceTime);
 452   3                if(modepin==0){
 453   4                  while(modepin!=1);
 454   4                  j++;
 455   4                  if(j==10)
 456   4                    setDate();
 457   4                }
 458   3              }
 459   2            }
 460   1            for(j=0;j<10;j++){
 461   2              AlarmTime[j]=60*AlarmHH[j]+AlarmMM[j] + AlarmAP[j]*720;   // update stored alarm time for comparison
 462   2              flag=0;
 463   2              delay(100);
 464   2            }
 465   1      }
 466          
 467          /*
 468          * Function Name:  main
 469          * Input:      void
 470          * Output:     synchronization of the whole system
 471          * Logic:      initialization, default set time or date (if any), read from rtc, temperature sensor and displa
             -y, check alarm, check id mode switch is pressed
 472          */
 473          void main(){  
 474   1        modepin=1;
 475   1        changeunits=1;
 476   1        changetens=1;
 477   1        setpin=1;
 478   1        InitI2C();  // Initialize i2c pins  
 479   1        flag=0;
 480   1        //set initial time
 481   1        //Set_DS1307_RTC_Time(PM_Time, 12, 59, 58); // Set time 12:59:58 PM
 482   1        //Set_DS1307_RTC_Date(24, 8, 18, 0);  // Set Set 24-08-2017
 483   1        while(1){
C51 COMPILER V9.56.0.0   TEST                                                              04/18/2018 00:03:18 PAGE 9   

 484   2          flag=0;
 485   2          CalculateDateTo7seg(Get_DS1307_RTC_Date());
 486   2          CalculateTimeTo7seg(Get_DS1307_RTC_Time());
 487   2          if(SS%5==4)
 488   2            tempflag=1;
 489   2          if(SS%5==0 && tempflag==1){
 490   3            delay(10000);
 491   3            CalculateTempTo7seg(getTemp());
 492   3            tempflag=0;
 493   3            delay(10000);
 494   3          }
 495   2          display();
 496   2          if(AlarmTime==currentTime)
 497   2            buzzer=1;
 498   2          else buzzer=0;
 499   2          if(modepin==0){
 500   3            delay(debounceTime);
 501   3            if(modepin==0){
 502   4              while(modepin!=1);
 503   4              setAlarm();
 504   4            }
 505   3          }
 506   2          delay(65000);
 507   2        }
 508   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2042    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     96      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
