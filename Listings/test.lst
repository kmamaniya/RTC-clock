C51 COMPILER V9.56.0.0   TEST                                                              04/02/2018 15:17:33 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TEST
OBJECT MODULE PLACED IN .\Objects\test.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE test.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\test
                    -.lst) TABS(2) OBJECT(.\Objects\test.obj)

line level    source

   1          /*
   2          
   3          * Project Name:   Table Clock
   4          * Author List:    Karan Mamaniya
   5          * Filename:     test.c
   6          * Functions:    
   7          * Global Variables: currentTime, AlarmTime, dispArr[], dispArr1[]
   8          *
   9          */
  10          
  11          #include "Includes.h"
  12          #include "DHT11.h"
  13          #include <reg51.h>
  14          #define debounceTime 1000
  15          
  16          long currentTime;
  17          long AlarmTime;
  18          unsigned char dispArr1[7];
  19          unsigned char dispArr[10];
  20          sbit modepin = P0^0;
  21          sbit changetens = P0^1;
  22          sbit changeunits= P0^2;
  23          sbit setpin = P0^3;
  24          sbit AMLed = P3^2;
  25          sbit PMLed = P3^3;
  26          sbit buzzer = P3^4;
  27          sbit latch = P3^0;
  28          int flag=0;
  29          unsigned char AlarmHH=1;
  30          unsigned char AlarmMM=0;
  31          unsigned char AlarmAP=0;
  32          unsigned char YY1=20,YY2,MM,DD,HH,MIN,SS,AP;
  33          int bitflag=0;
  34          int timeset=0;
  35          
  36          
  37          /*
  38          * Function Name:  CalculateTempTo7seg
  39          * Input:      unsigned char
  40          * Output:     void, values updates in the display array
  41          * Logic:      decode BCD from decimal data
  42          */
  43          void CalculateTempTo7seg(unsigned char temp){
  44   1        //Temperature
  45   1        dispArr[8]=temp/10;
  46   1        dispArr[9]=temp%10;
  47   1      }
  48          
  49          /*
  50          * Function Name:  CalculateDateTo7seg
  51          * Input:      char *
  52          * Output:     void, values updates in the display array
  53          * Logic:      decode BCD from decimal data
  54          */
C51 COMPILER V9.56.0.0   TEST                                                              04/02/2018 15:17:33 PAGE 2   

  55          void CalculateDateTo7seg(char * pDateArray){   // Displays date in DD:MM:YYYY format
  56   1        
  57   1        //Date
  58   1        DD=pDateArray[1];
  59   1        dispArr[0]=(char)(DD/10);
  60   1        dispArr[1]=(char)(DD%10);
  61   1        
  62   1        //Months
  63   1        MM=pDateArray[2];
  64   1        dispArr[2]=(char)(MM/10);
  65   1        dispArr[3]=(char)(MM%10);
  66   1        
  67   1        //Year
  68   1        dispArr[4]=(char)YY1/10;
  69   1        dispArr[5]=(char)YY1%10;
  70   1        YY2=pDateArray[3];
  71   1        dispArr[6]=(char)(YY2/10);
  72   1        dispArr[7]=(char)(YY2%10);
  73   1        YY2=pDateArray[3];
  74   1      }
  75          
  76          /*
  77          * Function Name:  CalculateTimeTo7seg
  78          * Input:      char *
  79          * Output:     void, values updates in the display array
  80          * Logic:      decode BCD from decimal data, store the current time in a variable
  81          */
  82          void CalculateTimeTo7seg(char *pTimeArray) {  // Displays date in DD:MM:YYYY format
  83   1        
  84   1        //Hours
  85   1        HH=pTimeArray[2];
  86   1        dispArr1[0]=(HH/10);
  87   1        dispArr1[1]=(HH%10);
  88   1        
  89   1        //Minutes
  90   1        MIN=pTimeArray[1];
  91   1        dispArr1[2]=(MIN/10);
  92   1        dispArr1[3]=(MIN%10);
  93   1        
  94   1        //Seconds
  95   1        SS=pTimeArray[0];
  96   1        dispArr1[4]=(SS/10);
  97   1        dispArr1[5]=(SS%10);
  98   1        
  99   1        //AM PM
 100   1        AP=(unsigned char)pTimeArray[3];
 101   1        dispArr1[6]=AP;
 102   1        currentTime = 60*pTimeArray[2]+pTimeArray[1] + AP*720;    // 60 MINS * NO. OF HOURS + MINUTES  + 12 HOURS
             - for AM/PM
 103   1      }
 104          
 105          /*
 106          * Function Name:  display
 107          * Input:      void
 108          * Output:     void, Displays time, date, temperature on 7 Segment LED
 109          * Logic:      chose the led to be displayed by address on port 1 and latch it with data by port 2
 110          */
 111          void display(){
 112   1        char i;
 113   1        
 114   1        /// AM PM LED DISPLAY
 115   1        if(dispArr1[6]==1){
C51 COMPILER V9.56.0.0   TEST                                                              04/02/2018 15:17:33 PAGE 3   

 116   2          PMLed=1;delay(100);
 117   2          AMLed=0;
 118   2        }
 119   1        else if(dispArr1[6]==0){
 120   2          PMLed=0;delay(100);
 121   2          AMLed=1;
 122   2        }
 123   1        else{
 124   2          PMLed=0;delay(100);
 125   2          AMLed=0;
 126   2        }
 127   1        
 128   1        
 129   1        //DATE DISPLAY
 130   1        for(i=0;i<10;i++){
 131   2          P2 = dispArr[i];
 132   2          delay(10);
 133   2          P1 = (unsigned char)i;
 134   2          delay(10);
 135   2          latch=0;
 136   2          delay(10);
 137   2          latch=1;
 138   2          delay(10);
 139   2        }
 140   1        
 141   1        
 142   1        //TIME DISPLAY
 143   1        for(i=0;i<6;i++){
 144   2          P2 = dispArr1[i];
 145   2          delay(10);
 146   2          P1 = (unsigned char)(i+10);
 147   2          delay(10);
 148   2          latch=0;
 149   2          delay(10);
 150   2          latch=1;
 151   2          delay(10);
 152   2        }
 153   1      }
 154          
 155          
 156          /*
 157          * Function Name:  setTime
 158          * Input:      void
 159          * Output:     void, sets user inputed time in the RTC
 160          * Logic:      dont update if no changed made, Store the variables temporarily in HH,MM,SS, AP display 0 for r
             -est of the values 
 161          */
 162          void setTime(){
 163   1        int i;
 164   1        timeset=0;
 165   1        bitflag=0;
 166   1          while(1){
 167   2              if(modepin==0){
 168   3                delay(debounceTime);
 169   3                if(modepin==0){
 170   4                  while(modepin!=1);
 171   4                  flag = 2;
 172   4                  if(timeset==1)      // SET TIME ONLY IF CHANGED
 173   4                    Set_DS1307_RTC_Time(AP,HH,MIN,SS);
 174   4                  Set_DS1307_RTC_Date(DD,MM,YY2,4);
 175   4                  break;
 176   4                }
C51 COMPILER V9.56.0.0   TEST                                                              04/02/2018 15:17:33 PAGE 4   

 177   3              }
 178   2              for(i=0;i<10;i++)     //Make the date segment 00 00 0000
 179   2                dispArr[i]=0;
 180   2              
 181   2              dispArr1[0]=HH/10;      //Display the temporary variables
 182   2              dispArr1[1]=HH%10;
 183   2              dispArr1[2]=MIN/10;
 184   2              dispArr1[3]=MIN%10;
 185   2              dispArr1[4]=SS/10;
 186   2              dispArr1[5]=SS%10;
 187   2              dispArr1[6]=AP;
 188   2              
 189   2              display();
 190   2              
 191   2              
 192   2              // IF DECREMENT IS PRESSED
 193   2              if(changetens==0){
 194   3                delay(debounceTime);
 195   3                if(changetens==0){
 196   4                  timeset=1;        //marks change in value, hence update time
 197   4                  while(changetens!=1);
 198   4                  switch(bitflag){
 199   5                    case 0: HH--;
 200   5                            if(HH==0)
 201   5                              HH=12;
 202   5                            break;
 203   5                    case 1: MIN--;
 204   5                            if(MIN>=60)
 205   5                              MIN=59;
 206   5                            break;
 207   5                    case 2: SS--;
 208   5                            if(SS>=60)
 209   5                              SS=59;
 210   5                            break;
 211   5                    case 3: AP++;
 212   5                            AP%=2;
 213   5                    default: break;
 214   5                  }
 215   4                }
 216   3              }
 217   2              
 218   2              
 219   2              // IF INCREMENT IS PRESSED
 220   2              if(changeunits==0){
 221   3                delay(debounceTime);
 222   3                if(changeunits==0){
 223   4                  timeset=1;      //marks change in value, hence update time
 224   4                  while(changeunits!=1);
 225   4                  switch(bitflag){
 226   5                    case 0: HH++;
 227   5                            if(HH>12)
 228   5                              HH=1;
 229   5                            break;
 230   5                    case 1: MIN++;
 231   5                            MIN=MIN%60;
 232   5                            break;
 233   5                    case 2: SS++;
 234   5                            SS=SS%60;
 235   5                            break;
 236   5                    case 3: AP++;
 237   5                            AP%=2;
 238   5                    default: break;
C51 COMPILER V9.56.0.0   TEST                                                              04/02/2018 15:17:33 PAGE 5   

 239   5                  }
 240   4                }
 241   3              }
 242   2              
 243   2              
 244   2            //IF CHANGE BLOCK IS PRESSED
 245   2            if(setpin==0){
 246   3              delay(debounceTime);
 247   3              if(setpin==0){
 248   4                while(setpin!=1);
 249   4                bitflag++;
 250   4                bitflag%=4;
 251   4              }
 252   3            }
 253   2          }
 254   1      }
 255          
 256          
 257          /*
 258          * Function Name:  setDate
 259          * Input:      void
 260          * Output:     void, sets user inputed date in the RTC
 261          * Output:     void, sets user inputed date in the RTC
 262          * Logic:      update even if no changed made, Store the variables temporarily in DD,MM,YYYY display 0 for res
             -t of the values 
 263          */
 264          void setDate(){
 265   1          int i;
 266   1          bitflag=0;
 267   1          while(flag<2){
 268   2          for(i=0;i<6;i++)      //display 00:00:00 for time
 269   2            dispArr1[i]=0;
 270   2          
 271   2          
 272   2          dispArr1[6]=2;        //Display temporary variables
 273   2          dispArr[8]=0;
 274   2          dispArr[9]=0;
 275   2          dispArr[0]=DD/10;
 276   2          dispArr[1]=DD%10;
 277   2          dispArr[2]=MM/10;
 278   2          dispArr[3]=MM%10;
 279   2          dispArr[4]=YY1/10;
 280   2          dispArr[5]=YY1%10;
 281   2          dispArr[6]=YY2/10;
 282   2          dispArr[7]=YY2%10;
 283   2          display();
 284   2            
 285   2          //IF INCREMENT IS PRESSED
 286   2          if(changetens==0){
 287   3            delay(debounceTime);
 288   3            if(changetens==0){
 289   4              while(changetens!=1);
 290   4              switch(bitflag){
 291   5                case 0: DD--;
 292   5                        if(DD==0)
 293   5                          DD=31;
 294   5                        break;
 295   5                case 1: MM--;
 296   5                        if(MM==0)
 297   5                          MM=12;
 298   5                        break;
 299   5                case 2: YY1--;
C51 COMPILER V9.56.0.0   TEST                                                              04/02/2018 15:17:33 PAGE 6   

 300   5                        if(YY1>99)
 301   5                          YY1=99;
 302   5                        break;
 303   5                case 3: YY2--;
 304   5                        if(YY2>99)
 305   5                          YY2=99;
 306   5                default: break;
 307   5              }
 308   4            }
 309   3          }
 310   2          
 311   2          //IF DECREMENT IS PRESSED
 312   2          if(changeunits==0){
 313   3            delay(debounceTime);
 314   3            if(changeunits==0){
 315   4              while(changeunits!=1);
 316   4              switch(bitflag){
 317   5                case 0: DD++;
 318   5                        if(DD>31)
 319   5                          DD=1;
 320   5                        break;
 321   5                case 1: MM++;
 322   5                        if(MM>12)
 323   5                          MM=1;
 324   5                        break;
 325   5                case 2: YY1++;
 326   5                        YY1%=100;
 327   5                        break;
 328   5                case 3: YY2++;
 329   5                        YY2%=100;
 330   5                default: break;
 331   5              }
 332   4            }
 333   3          }
 334   2          
 335   2          //IF CHANGE BLOCK IS PRESSED
 336   2          if(setpin==0){
 337   3            delay(debounceTime);
 338   3            if(setpin==0){
 339   4              while(setpin!=1);
 340   4              bitflag++;
 341   4              bitflag%=4;
 342   4            }
 343   3          }
 344   2          
 345   2          //IF CHANGE MODE IS PRESSED
 346   2          if(modepin==0){
 347   3            delay(debounceTime);
 348   3            if(modepin==0){
 349   4              while(modepin!=1);
 350   4              setTime();
 351   4            }
 352   3          }
 353   2        } 
 354   1      }
 355          
 356          /*
 357          * Function Name:  setAlarm
 358          * Input:      void
 359          * Output:     void, stores user inputed alarm in the memore
 360          * Logic:      update even if no changed made, Store the variables temporarily in AlarmHH,AlarmMM,AlarmSS,Alar
             -mAP, display 0 for rest pf the values 
C51 COMPILER V9.56.0.0   TEST                                                              04/02/2018 15:17:33 PAGE 7   

 361          */
 362          void setAlarm(){
 363   1          int i=0;
 364   1          bitflag=0;
 365   1          while(flag<2){
 366   2            
 367   2            for(i=0;i<10;i++)     // DISPLAY 00 00 0000 for date
 368   2              dispArr[i]=0;
 369   2              
 370   2            dispArr1[0]=AlarmHH/10;   //Display stored alarm or default alarm on 7 seg display
 371   2            dispArr1[1]=AlarmHH%10;
 372   2            dispArr1[2]=AlarmMM/10;
 373   2            dispArr1[3]=AlarmMM%10;
 374   2            dispArr1[4]=0;
 375   2            dispArr1[5]=0;
 376   2            dispArr1[6]=AlarmAP;
 377   2            display();
 378   2            
 379   2            //IF DECREMENT IS PRESSED
 380   2            if(changetens==0){
 381   3              delay(debounceTime);
 382   3              if(changetens==0){
 383   4                while(changetens!=1 );
 384   4                if(bitflag==0){
 385   5                  AlarmHH--;
 386   5                  if(AlarmHH==0)
 387   5                    AlarmHH=12;
 388   5                }
 389   4                else if(bitflag==1){
 390   5                  AlarmMM--;
 391   5                  if(AlarmMM>=60)
 392   5                    AlarmMM=59;
 393   5                }
 394   4                else {
 395   5                    AlarmAP++;
 396   5                    AlarmAP%=2;
 397   5                }
 398   4              }
 399   3            }
 400   2            
 401   2            //IF INCREMENT IS PRESSED
 402   2            if(changeunits==0){
 403   3              delay(debounceTime);
 404   3              if(changeunits==0){
 405   4                while(changeunits!=1);
 406   4                if(bitflag==0){
 407   5                  AlarmHH++;
 408   5                  if(AlarmHH>12)
 409   5                    AlarmHH=1;
 410   5                }
 411   4                else if(bitflag==1){
 412   5                  AlarmMM++;
 413   5                  AlarmMM%=60;
 414   5                }
 415   4                else {
 416   5                    AlarmAP++;
 417   5                    AlarmAP%=2;
 418   5                }
 419   4              }
 420   3            }
 421   2            
 422   2            //IF CHANGE BLOCK IS PRESSED
C51 COMPILER V9.56.0.0   TEST                                                              04/02/2018 15:17:33 PAGE 8   

 423   2            if(setpin==0){
 424   3              delay(debounceTime);
 425   3              if(setpin==0){
 426   4                while(setpin!=1);
 427   4                bitflag++;
 428   4                bitflag%=3;
 429   4              }
 430   3            }
 431   2            
 432   2            //IF CHANGE MODE IS PRESSED
 433   2            if(modepin==0){
 434   3            delay(debounceTime);
 435   3              if(modepin==0){
 436   4                while(modepin!=1);
 437   4                setDate();
 438   4              }
 439   3            }
 440   2          }
 441   1          
 442   1          AlarmTime=60*AlarmHH+AlarmMM + AlarmAP*720;   // update stored alarm time for comparison
 443   1          flag=0;
 444   1      }
 445          
 446          /*
 447          * Function Name:  main
 448          * Input:      void
 449          * Output:     synchronization of the whole system
 450          * Logic:      initialization, default set time or date (if any), read from rtc, temperature sensor and displa
             -y, check alarm, check id mode switch is pressed
 451          */
 452          void main(){  
 453   1        modepin=1;
 454   1        changeunits=1;
 455   1        changetens=1;
 456   1        setpin=1;
 457   1        InitI2C();  // Initialize i2c pins  
 458   1        flag=0;
 459   1        //set initial time
 460   1        //Set_DS1307_RTC_Time(PM_Time, 12, 59, 58); // Set time 10:54:00 AM
 461   1        //Set initial date
 462   1        //Set_DS1307_RTC_Date(24, 8, 77, 0);  // Set Set 24-08-2017
 463   1        while(1){
 464   2          flag=0;
 465   2          CalculateDateTo7seg(Get_DS1307_RTC_Date());
 466   2          CalculateTimeTo7seg(Get_DS1307_RTC_Time());
 467   2          CalculateTempTo7seg(getTemp());
 468   2          display();
 469   2          if(AlarmTime==currentTime)
 470   2            buzzer=1;
 471   2          else buzzer=0;
 472   2          if(modepin==0){
 473   3            delay(debounceTime);
 474   3            if(modepin==0){
 475   4              while(modepin!=1);
 476   4              setAlarm();
 477   4            }
 478   3          }
 479   2          delay(5000);
 480   2        }
 481   1      }


C51 COMPILER V9.56.0.0   TEST                                                              04/02/2018 15:17:33 PAGE 9   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1708    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     52       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
